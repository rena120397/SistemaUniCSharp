//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NegocioWebDAO.Entidades
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NegocioWebEntities : DbContext
    {
        public NegocioWebEntities()
            : base("name=NegocioWebEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Categorías> Categorías { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
        public virtual DbSet<COMISIONE> COMISIONES { get; set; }
        public virtual DbSet<Compañías_de_envíos> Compañías_de_envíos { get; set; }
        public virtual DbSet<Detalles_de_pedido> Detalles_de_pedidos { get; set; }
        public virtual DbSet<Empleado> Empleados { get; set; }
        public virtual DbSet<HISTORICO> HISTORICOS { get; set; }
        public virtual DbSet<Pedido> Pedidos { get; set; }
        public virtual DbSet<Producto> Productos { get; set; }
        public virtual DbSet<Proveedore> Proveedores { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_ActualizarStock(Nullable<int> tipo, Nullable<int> idproducto, Nullable<int> cantidad)
        {
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(int));
    
            var idproductoParameter = idproducto.HasValue ?
                new ObjectParameter("idproducto", idproducto) :
                new ObjectParameter("idproducto", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ActualizarStock", tipoParameter, idproductoParameter, cantidadParameter);
        }
    
        public virtual int USP_AGREGAEMPLEADO(Nullable<int> iDEMPLEADO, string nOMBRE, string aPELLIDOS, string cARGO, Nullable<System.DateTime> fECHANACIMIENTO, Nullable<System.DateTime> fECHACONTRATO, ObjectParameter rES)
        {
            var iDEMPLEADOParameter = iDEMPLEADO.HasValue ?
                new ObjectParameter("IDEMPLEADO", iDEMPLEADO) :
                new ObjectParameter("IDEMPLEADO", typeof(int));
    
            var nOMBREParameter = nOMBRE != null ?
                new ObjectParameter("NOMBRE", nOMBRE) :
                new ObjectParameter("NOMBRE", typeof(string));
    
            var aPELLIDOSParameter = aPELLIDOS != null ?
                new ObjectParameter("APELLIDOS", aPELLIDOS) :
                new ObjectParameter("APELLIDOS", typeof(string));
    
            var cARGOParameter = cARGO != null ?
                new ObjectParameter("CARGO", cARGO) :
                new ObjectParameter("CARGO", typeof(string));
    
            var fECHANACIMIENTOParameter = fECHANACIMIENTO.HasValue ?
                new ObjectParameter("FECHANACIMIENTO", fECHANACIMIENTO) :
                new ObjectParameter("FECHANACIMIENTO", typeof(System.DateTime));
    
            var fECHACONTRATOParameter = fECHACONTRATO.HasValue ?
                new ObjectParameter("FECHACONTRATO", fECHACONTRATO) :
                new ObjectParameter("FECHACONTRATO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_AGREGAEMPLEADO", iDEMPLEADOParameter, nOMBREParameter, aPELLIDOSParameter, cARGOParameter, fECHANACIMIENTOParameter, fECHACONTRATOParameter, rES);
        }
    
        public virtual ObjectResult<USP_BUSCAREMPLEADO_Result> USP_BUSCAREMPLEADO(Nullable<int> iDEMPLEADO)
        {
            var iDEMPLEADOParameter = iDEMPLEADO.HasValue ?
                new ObjectParameter("IDEMPLEADO", iDEMPLEADO) :
                new ObjectParameter("IDEMPLEADO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_BUSCAREMPLEADO_Result>("USP_BUSCAREMPLEADO", iDEMPLEADOParameter);
        }
    
        public virtual int usp_CategoríasDelete(Nullable<int> idCategoría)
        {
            var idCategoríaParameter = idCategoría.HasValue ?
                new ObjectParameter("IdCategoría", idCategoría) :
                new ObjectParameter("IdCategoría", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CategoríasDelete", idCategoríaParameter);
        }
    
        public virtual int usp_CategoríasInsert(Nullable<int> idCategoría, string nombreCategoría)
        {
            var idCategoríaParameter = idCategoría.HasValue ?
                new ObjectParameter("IdCategoría", idCategoría) :
                new ObjectParameter("IdCategoría", typeof(int));
    
            var nombreCategoríaParameter = nombreCategoría != null ?
                new ObjectParameter("NombreCategoría", nombreCategoría) :
                new ObjectParameter("NombreCategoría", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CategoríasInsert", idCategoríaParameter, nombreCategoríaParameter);
        }
    
        public virtual ObjectResult<usp_CategoríasSelect_Result> usp_CategoríasSelect(Nullable<int> idCategoría)
        {
            var idCategoríaParameter = idCategoría.HasValue ?
                new ObjectParameter("IdCategoría", idCategoría) :
                new ObjectParameter("IdCategoría", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CategoríasSelect_Result>("usp_CategoríasSelect", idCategoríaParameter);
        }
    
        public virtual ObjectResult<usp_CategoríasSelectAll_Result> usp_CategoríasSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CategoríasSelectAll_Result>("usp_CategoríasSelectAll");
        }
    
        public virtual int usp_CategoríasUpdate(Nullable<int> idCategoría, string nombreCategoría)
        {
            var idCategoríaParameter = idCategoría.HasValue ?
                new ObjectParameter("IdCategoría", idCategoría) :
                new ObjectParameter("IdCategoría", typeof(int));
    
            var nombreCategoríaParameter = nombreCategoría != null ?
                new ObjectParameter("NombreCategoría", nombreCategoría) :
                new ObjectParameter("NombreCategoría", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CategoríasUpdate", idCategoríaParameter, nombreCategoríaParameter);
        }
    
        public virtual int usp_ClientesDelete(string idCliente)
        {
            var idClienteParameter = idCliente != null ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ClientesDelete", idClienteParameter);
        }
    
        public virtual int usp_ClientesInsert(string idCliente, string nombreCompañía, string nombreContacto, string cargoContacto, string dirección, string ciudad, string país, string teléfono)
        {
            var idClienteParameter = idCliente != null ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(string));
    
            var nombreCompañíaParameter = nombreCompañía != null ?
                new ObjectParameter("NombreCompañía", nombreCompañía) :
                new ObjectParameter("NombreCompañía", typeof(string));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("NombreContacto", nombreContacto) :
                new ObjectParameter("NombreContacto", typeof(string));
    
            var cargoContactoParameter = cargoContacto != null ?
                new ObjectParameter("CargoContacto", cargoContacto) :
                new ObjectParameter("CargoContacto", typeof(string));
    
            var direcciónParameter = dirección != null ?
                new ObjectParameter("Dirección", dirección) :
                new ObjectParameter("Dirección", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var paísParameter = país != null ?
                new ObjectParameter("País", país) :
                new ObjectParameter("País", typeof(string));
    
            var teléfonoParameter = teléfono != null ?
                new ObjectParameter("Teléfono", teléfono) :
                new ObjectParameter("Teléfono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ClientesInsert", idClienteParameter, nombreCompañíaParameter, nombreContactoParameter, cargoContactoParameter, direcciónParameter, ciudadParameter, paísParameter, teléfonoParameter);
        }
    
        public virtual ObjectResult<usp_ClientesSelect_Result> usp_ClientesSelect(string idCliente)
        {
            var idClienteParameter = idCliente != null ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClientesSelect_Result>("usp_ClientesSelect", idClienteParameter);
        }
    
        public virtual ObjectResult<usp_ClientesSelectAll_Result> usp_ClientesSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ClientesSelectAll_Result>("usp_ClientesSelectAll");
        }
    
        public virtual int usp_ClientesUpdate(string idCliente, string nombreCompañía, string nombreContacto, string cargoContacto, string dirección, string ciudad, string país, string teléfono)
        {
            var idClienteParameter = idCliente != null ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(string));
    
            var nombreCompañíaParameter = nombreCompañía != null ?
                new ObjectParameter("NombreCompañía", nombreCompañía) :
                new ObjectParameter("NombreCompañía", typeof(string));
    
            var nombreContactoParameter = nombreContacto != null ?
                new ObjectParameter("NombreContacto", nombreContacto) :
                new ObjectParameter("NombreContacto", typeof(string));
    
            var cargoContactoParameter = cargoContacto != null ?
                new ObjectParameter("CargoContacto", cargoContacto) :
                new ObjectParameter("CargoContacto", typeof(string));
    
            var direcciónParameter = dirección != null ?
                new ObjectParameter("Dirección", dirección) :
                new ObjectParameter("Dirección", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var paísParameter = país != null ?
                new ObjectParameter("País", país) :
                new ObjectParameter("País", typeof(string));
    
            var teléfonoParameter = teléfono != null ?
                new ObjectParameter("Teléfono", teléfono) :
                new ObjectParameter("Teléfono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ClientesUpdate", idClienteParameter, nombreCompañíaParameter, nombreContactoParameter, cargoContactoParameter, direcciónParameter, ciudadParameter, paísParameter, teléfonoParameter);
        }
    
        public virtual int usp_Compañías_de_envíosDelete(Nullable<int> idCompañíaEnvíos)
        {
            var idCompañíaEnvíosParameter = idCompañíaEnvíos.HasValue ?
                new ObjectParameter("IdCompañíaEnvíos", idCompañíaEnvíos) :
                new ObjectParameter("IdCompañíaEnvíos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Compañías_de_envíosDelete", idCompañíaEnvíosParameter);
        }
    
        public virtual int usp_Compañías_de_envíosInsert(Nullable<int> idCompañíaEnvíos, string nombreCompañía, string teléfono)
        {
            var idCompañíaEnvíosParameter = idCompañíaEnvíos.HasValue ?
                new ObjectParameter("IdCompañíaEnvíos", idCompañíaEnvíos) :
                new ObjectParameter("IdCompañíaEnvíos", typeof(int));
    
            var nombreCompañíaParameter = nombreCompañía != null ?
                new ObjectParameter("NombreCompañía", nombreCompañía) :
                new ObjectParameter("NombreCompañía", typeof(string));
    
            var teléfonoParameter = teléfono != null ?
                new ObjectParameter("Teléfono", teléfono) :
                new ObjectParameter("Teléfono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Compañías_de_envíosInsert", idCompañíaEnvíosParameter, nombreCompañíaParameter, teléfonoParameter);
        }
    
        public virtual ObjectResult<usp_Compañías_de_envíosSelect_Result> usp_Compañías_de_envíosSelect(Nullable<int> idCompañíaEnvíos)
        {
            var idCompañíaEnvíosParameter = idCompañíaEnvíos.HasValue ?
                new ObjectParameter("IdCompañíaEnvíos", idCompañíaEnvíos) :
                new ObjectParameter("IdCompañíaEnvíos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Compañías_de_envíosSelect_Result>("usp_Compañías_de_envíosSelect", idCompañíaEnvíosParameter);
        }
    
        public virtual ObjectResult<usp_Compañías_de_envíosSelectAll_Result> usp_Compañías_de_envíosSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Compañías_de_envíosSelectAll_Result>("usp_Compañías_de_envíosSelectAll");
        }
    
        public virtual int usp_Compañías_de_envíosUpdate(Nullable<int> idCompañíaEnvíos, string nombreCompañía, string teléfono)
        {
            var idCompañíaEnvíosParameter = idCompañíaEnvíos.HasValue ?
                new ObjectParameter("IdCompañíaEnvíos", idCompañíaEnvíos) :
                new ObjectParameter("IdCompañíaEnvíos", typeof(int));
    
            var nombreCompañíaParameter = nombreCompañía != null ?
                new ObjectParameter("NombreCompañía", nombreCompañía) :
                new ObjectParameter("NombreCompañía", typeof(string));
    
            var teléfonoParameter = teléfono != null ?
                new ObjectParameter("Teléfono", teléfono) :
                new ObjectParameter("Teléfono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Compañías_de_envíosUpdate", idCompañíaEnvíosParameter, nombreCompañíaParameter, teléfonoParameter);
        }
    
        public virtual int usp_Detalles_de_pedidosDelete(Nullable<int> idPedido, Nullable<int> idProducto)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Detalles_de_pedidosDelete", idPedidoParameter, idProductoParameter);
        }
    
        public virtual int usp_Detalles_de_pedidosDeleteAllByIdPedido(Nullable<int> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Detalles_de_pedidosDeleteAllByIdPedido", idPedidoParameter);
        }
    
        public virtual int usp_Detalles_de_pedidosDeleteAllByIdProducto(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Detalles_de_pedidosDeleteAllByIdProducto", idProductoParameter);
        }
    
        public virtual int usp_Detalles_de_pedidosInsert(Nullable<int> idPedido, Nullable<int> idProducto, Nullable<decimal> precioUnidad, Nullable<short> cantidad)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var precioUnidadParameter = precioUnidad.HasValue ?
                new ObjectParameter("PrecioUnidad", precioUnidad) :
                new ObjectParameter("PrecioUnidad", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Detalles_de_pedidosInsert", idPedidoParameter, idProductoParameter, precioUnidadParameter, cantidadParameter);
        }
    
        public virtual ObjectResult<usp_Detalles_de_pedidosSelect_Result> usp_Detalles_de_pedidosSelect(Nullable<int> idPedido, Nullable<int> idProducto)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Detalles_de_pedidosSelect_Result>("usp_Detalles_de_pedidosSelect", idPedidoParameter, idProductoParameter);
        }
    
        public virtual ObjectResult<usp_Detalles_de_pedidosSelectAll_Result> usp_Detalles_de_pedidosSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Detalles_de_pedidosSelectAll_Result>("usp_Detalles_de_pedidosSelectAll");
        }
    
        public virtual ObjectResult<usp_Detalles_de_pedidosSelectAllByIdPedido_Result> usp_Detalles_de_pedidosSelectAllByIdPedido(Nullable<int> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Detalles_de_pedidosSelectAllByIdPedido_Result>("usp_Detalles_de_pedidosSelectAllByIdPedido", idPedidoParameter);
        }
    
        public virtual ObjectResult<usp_Detalles_de_pedidosSelectAllByIdProducto_Result> usp_Detalles_de_pedidosSelectAllByIdProducto(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Detalles_de_pedidosSelectAllByIdProducto_Result>("usp_Detalles_de_pedidosSelectAllByIdProducto", idProductoParameter);
        }
    
        public virtual int usp_Detalles_de_pedidosUpdate(Nullable<int> idPedido, Nullable<int> idProducto, Nullable<decimal> precioUnidad, Nullable<short> cantidad)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var precioUnidadParameter = precioUnidad.HasValue ?
                new ObjectParameter("PrecioUnidad", precioUnidad) :
                new ObjectParameter("PrecioUnidad", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Detalles_de_pedidosUpdate", idPedidoParameter, idProductoParameter, precioUnidadParameter, cantidadParameter);
        }
    
        public virtual ObjectResult<usp_DetallesPedidoPorID_Result> usp_DetallesPedidoPorID(Nullable<int> idpedido)
        {
            var idpedidoParameter = idpedido.HasValue ?
                new ObjectParameter("idpedido", idpedido) :
                new ObjectParameter("idpedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DetallesPedidoPorID_Result>("usp_DetallesPedidoPorID", idpedidoParameter);
        }
    
        public virtual int USP_EDITAEMPLEADO(Nullable<int> iDEMPLEADO, string nOMBRE, string aPELLIDOS, string cARGO, Nullable<System.DateTime> fECHANACIMIENTO, Nullable<System.DateTime> fECHACONTRATO)
        {
            var iDEMPLEADOParameter = iDEMPLEADO.HasValue ?
                new ObjectParameter("IDEMPLEADO", iDEMPLEADO) :
                new ObjectParameter("IDEMPLEADO", typeof(int));
    
            var nOMBREParameter = nOMBRE != null ?
                new ObjectParameter("NOMBRE", nOMBRE) :
                new ObjectParameter("NOMBRE", typeof(string));
    
            var aPELLIDOSParameter = aPELLIDOS != null ?
                new ObjectParameter("APELLIDOS", aPELLIDOS) :
                new ObjectParameter("APELLIDOS", typeof(string));
    
            var cARGOParameter = cARGO != null ?
                new ObjectParameter("CARGO", cARGO) :
                new ObjectParameter("CARGO", typeof(string));
    
            var fECHANACIMIENTOParameter = fECHANACIMIENTO.HasValue ?
                new ObjectParameter("FECHANACIMIENTO", fECHANACIMIENTO) :
                new ObjectParameter("FECHANACIMIENTO", typeof(System.DateTime));
    
            var fECHACONTRATOParameter = fECHACONTRATO.HasValue ?
                new ObjectParameter("FECHACONTRATO", fECHACONTRATO) :
                new ObjectParameter("FECHACONTRATO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_EDITAEMPLEADO", iDEMPLEADOParameter, nOMBREParameter, aPELLIDOSParameter, cARGOParameter, fECHANACIMIENTOParameter, fECHACONTRATOParameter);
        }
    
        public virtual int USP_ELIMINAEMPLEADO(Nullable<int> iDEMPLEADO)
        {
            var iDEMPLEADOParameter = iDEMPLEADO.HasValue ?
                new ObjectParameter("IDEMPLEADO", iDEMPLEADO) :
                new ObjectParameter("IDEMPLEADO", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ELIMINAEMPLEADO", iDEMPLEADOParameter);
        }
    
        public virtual int usp_EmpleadosDelete(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmpleadosDelete", idEmpleadoParameter);
        }
    
        public virtual int usp_EmpleadosInsert(Nullable<int> idEmpleado, string apellidos, string nombre, string cargo, Nullable<System.DateTime> fechaNacimiento, Nullable<System.DateTime> fechaContratación, string dirección, string ciudad, string país, string telDomicilio, string foto)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var fechaContrataciónParameter = fechaContratación.HasValue ?
                new ObjectParameter("FechaContratación", fechaContratación) :
                new ObjectParameter("FechaContratación", typeof(System.DateTime));
    
            var direcciónParameter = dirección != null ?
                new ObjectParameter("Dirección", dirección) :
                new ObjectParameter("Dirección", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var paísParameter = país != null ?
                new ObjectParameter("País", país) :
                new ObjectParameter("País", typeof(string));
    
            var telDomicilioParameter = telDomicilio != null ?
                new ObjectParameter("TelDomicilio", telDomicilio) :
                new ObjectParameter("TelDomicilio", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmpleadosInsert", idEmpleadoParameter, apellidosParameter, nombreParameter, cargoParameter, fechaNacimientoParameter, fechaContrataciónParameter, direcciónParameter, ciudadParameter, paísParameter, telDomicilioParameter, fotoParameter);
        }
    
        public virtual ObjectResult<usp_EmpleadosSelect_Result> usp_EmpleadosSelect(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmpleadosSelect_Result>("usp_EmpleadosSelect", idEmpleadoParameter);
        }
    
        public virtual ObjectResult<usp_EmpleadosSelectAll_Result> usp_EmpleadosSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmpleadosSelectAll_Result>("usp_EmpleadosSelectAll");
        }
    
        public virtual int usp_EmpleadosUpdate(Nullable<int> idEmpleado, string apellidos, string nombre, string cargo, Nullable<System.DateTime> fechaNacimiento, Nullable<System.DateTime> fechaContratación, string dirección, string ciudad, string país, string telDomicilio, string foto)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var fechaContrataciónParameter = fechaContratación.HasValue ?
                new ObjectParameter("FechaContratación", fechaContratación) :
                new ObjectParameter("FechaContratación", typeof(System.DateTime));
    
            var direcciónParameter = dirección != null ?
                new ObjectParameter("Dirección", dirección) :
                new ObjectParameter("Dirección", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var paísParameter = país != null ?
                new ObjectParameter("País", país) :
                new ObjectParameter("País", typeof(string));
    
            var telDomicilioParameter = telDomicilio != null ?
                new ObjectParameter("TelDomicilio", telDomicilio) :
                new ObjectParameter("TelDomicilio", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_EmpleadosUpdate", idEmpleadoParameter, apellidosParameter, nombreParameter, cargoParameter, fechaNacimientoParameter, fechaContrataciónParameter, direcciónParameter, ciudadParameter, paísParameter, telDomicilioParameter, fotoParameter);
        }
    
        public virtual ObjectResult<usp_Listar_pedidosPorFecha_Result> usp_Listar_pedidosPorFecha(Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFinal, string cliente)
        {
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("fechaFinal", fechaFinal) :
                new ObjectParameter("fechaFinal", typeof(System.DateTime));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Listar_pedidosPorFecha_Result>("usp_Listar_pedidosPorFecha", fechaInicioParameter, fechaFinalParameter, clienteParameter);
        }
    
        public virtual ObjectResult<usp_Listarproductos_Result> usp_Listarproductos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Listarproductos_Result>("usp_Listarproductos");
        }
    
        public virtual int usp_PedidosDelete(Nullable<int> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PedidosDelete", idPedidoParameter);
        }
    
        public virtual int usp_PedidosDeleteAllByFormaEnvío(Nullable<int> formaEnvío)
        {
            var formaEnvíoParameter = formaEnvío.HasValue ?
                new ObjectParameter("FormaEnvío", formaEnvío) :
                new ObjectParameter("FormaEnvío", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PedidosDeleteAllByFormaEnvío", formaEnvíoParameter);
        }
    
        public virtual int usp_PedidosDeleteAllByIdCliente(string idCliente)
        {
            var idClienteParameter = idCliente != null ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PedidosDeleteAllByIdCliente", idClienteParameter);
        }
    
        public virtual int usp_PedidosDeleteAllByIdEmpleado(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PedidosDeleteAllByIdEmpleado", idEmpleadoParameter);
        }
    
        public virtual int usp_PedidosInsert(ObjectParameter idPedido, string idCliente, Nullable<int> idEmpleado, Nullable<System.DateTime> fechaPedido, Nullable<System.DateTime> fechaEntrega, Nullable<int> formaEnvío, Nullable<decimal> cargo)
        {
            var idClienteParameter = idCliente != null ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(string));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var fechaPedidoParameter = fechaPedido.HasValue ?
                new ObjectParameter("FechaPedido", fechaPedido) :
                new ObjectParameter("FechaPedido", typeof(System.DateTime));
    
            var fechaEntregaParameter = fechaEntrega.HasValue ?
                new ObjectParameter("FechaEntrega", fechaEntrega) :
                new ObjectParameter("FechaEntrega", typeof(System.DateTime));
    
            var formaEnvíoParameter = formaEnvío.HasValue ?
                new ObjectParameter("FormaEnvío", formaEnvío) :
                new ObjectParameter("FormaEnvío", typeof(int));
    
            var cargoParameter = cargo.HasValue ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PedidosInsert", idPedido, idClienteParameter, idEmpleadoParameter, fechaPedidoParameter, fechaEntregaParameter, formaEnvíoParameter, cargoParameter);
        }
    
        public virtual ObjectResult<usp_pedidosPorFecha_Result> usp_pedidosPorFecha(Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFinal, string cliente)
        {
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("fechaFinal", fechaFinal) :
                new ObjectParameter("fechaFinal", typeof(System.DateTime));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_pedidosPorFecha_Result>("usp_pedidosPorFecha", fechaInicioParameter, fechaFinalParameter, clienteParameter);
        }
    
        public virtual ObjectResult<usp_PedidosSelect_Result> usp_PedidosSelect(Nullable<int> idPedido)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PedidosSelect_Result>("usp_PedidosSelect", idPedidoParameter);
        }
    
        public virtual ObjectResult<usp_PedidosSelectAll_Result> usp_PedidosSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PedidosSelectAll_Result>("usp_PedidosSelectAll");
        }
    
        public virtual ObjectResult<usp_PedidosSelectAllByFormaEnvío_Result> usp_PedidosSelectAllByFormaEnvío(Nullable<int> formaEnvío)
        {
            var formaEnvíoParameter = formaEnvío.HasValue ?
                new ObjectParameter("FormaEnvío", formaEnvío) :
                new ObjectParameter("FormaEnvío", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PedidosSelectAllByFormaEnvío_Result>("usp_PedidosSelectAllByFormaEnvío", formaEnvíoParameter);
        }
    
        public virtual ObjectResult<usp_PedidosSelectAllByIdCliente_Result> usp_PedidosSelectAllByIdCliente(string idCliente)
        {
            var idClienteParameter = idCliente != null ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PedidosSelectAllByIdCliente_Result>("usp_PedidosSelectAllByIdCliente", idClienteParameter);
        }
    
        public virtual ObjectResult<usp_PedidosSelectAllByIdEmpleado_Result> usp_PedidosSelectAllByIdEmpleado(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PedidosSelectAllByIdEmpleado_Result>("usp_PedidosSelectAllByIdEmpleado", idEmpleadoParameter);
        }
    
        public virtual int usp_PedidosUpdate(Nullable<int> idPedido, string idCliente, Nullable<int> idEmpleado, Nullable<System.DateTime> fechaPedido, Nullable<System.DateTime> fechaEntrega, Nullable<int> formaEnvío, Nullable<decimal> cargo)
        {
            var idPedidoParameter = idPedido.HasValue ?
                new ObjectParameter("IdPedido", idPedido) :
                new ObjectParameter("IdPedido", typeof(int));
    
            var idClienteParameter = idCliente != null ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(string));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var fechaPedidoParameter = fechaPedido.HasValue ?
                new ObjectParameter("FechaPedido", fechaPedido) :
                new ObjectParameter("FechaPedido", typeof(System.DateTime));
    
            var fechaEntregaParameter = fechaEntrega.HasValue ?
                new ObjectParameter("FechaEntrega", fechaEntrega) :
                new ObjectParameter("FechaEntrega", typeof(System.DateTime));
    
            var formaEnvíoParameter = formaEnvío.HasValue ?
                new ObjectParameter("FormaEnvío", formaEnvío) :
                new ObjectParameter("FormaEnvío", typeof(int));
    
            var cargoParameter = cargo.HasValue ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PedidosUpdate", idPedidoParameter, idClienteParameter, idEmpleadoParameter, fechaPedidoParameter, fechaEntregaParameter, formaEnvíoParameter, cargoParameter);
        }
    
        public virtual ObjectResult<usp_ProductoMasVendidos_Result> usp_ProductoMasVendidos(Nullable<int> anio, Nullable<int> mes, Nullable<int> cantidad)
        {
            var anioParameter = anio.HasValue ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(int));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductoMasVendidos_Result>("usp_ProductoMasVendidos", anioParameter, mesParameter, cantidadParameter);
        }
    
        public virtual ObjectResult<usp_productosAgotados_Result> usp_productosAgotados(Nullable<int> categoria, Nullable<int> cantidad)
        {
            var categoriaParameter = categoria.HasValue ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_productosAgotados_Result>("usp_productosAgotados", categoriaParameter, cantidadParameter);
        }
    
        public virtual int usp_ProductosDelete(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductosDelete", idProductoParameter);
        }
    
        public virtual int usp_ProductosDeleteAllByIdCategoría(Nullable<int> idCategoría)
        {
            var idCategoríaParameter = idCategoría.HasValue ?
                new ObjectParameter("IdCategoría", idCategoría) :
                new ObjectParameter("IdCategoría", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductosDeleteAllByIdCategoría", idCategoríaParameter);
        }
    
        public virtual int usp_ProductosDeleteAllByIdProveedor(Nullable<int> idProveedor)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductosDeleteAllByIdProveedor", idProveedorParameter);
        }
    
        public virtual int usp_ProductosInsert(Nullable<int> idProducto, string nombreProducto, Nullable<int> idProveedor, Nullable<int> idCategoría, string cantidadPorUnidad, Nullable<decimal> precioUnidad, Nullable<short> unidadesEnExistencia, Nullable<short> unidadesEnPedido, Nullable<int> nivelNuevoPedido, Nullable<bool> suspendido)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var nombreProductoParameter = nombreProducto != null ?
                new ObjectParameter("NombreProducto", nombreProducto) :
                new ObjectParameter("NombreProducto", typeof(string));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var idCategoríaParameter = idCategoría.HasValue ?
                new ObjectParameter("IdCategoría", idCategoría) :
                new ObjectParameter("IdCategoría", typeof(int));
    
            var cantidadPorUnidadParameter = cantidadPorUnidad != null ?
                new ObjectParameter("CantidadPorUnidad", cantidadPorUnidad) :
                new ObjectParameter("CantidadPorUnidad", typeof(string));
    
            var precioUnidadParameter = precioUnidad.HasValue ?
                new ObjectParameter("PrecioUnidad", precioUnidad) :
                new ObjectParameter("PrecioUnidad", typeof(decimal));
    
            var unidadesEnExistenciaParameter = unidadesEnExistencia.HasValue ?
                new ObjectParameter("UnidadesEnExistencia", unidadesEnExistencia) :
                new ObjectParameter("UnidadesEnExistencia", typeof(short));
    
            var unidadesEnPedidoParameter = unidadesEnPedido.HasValue ?
                new ObjectParameter("UnidadesEnPedido", unidadesEnPedido) :
                new ObjectParameter("UnidadesEnPedido", typeof(short));
    
            var nivelNuevoPedidoParameter = nivelNuevoPedido.HasValue ?
                new ObjectParameter("NivelNuevoPedido", nivelNuevoPedido) :
                new ObjectParameter("NivelNuevoPedido", typeof(int));
    
            var suspendidoParameter = suspendido.HasValue ?
                new ObjectParameter("Suspendido", suspendido) :
                new ObjectParameter("Suspendido", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductosInsert", idProductoParameter, nombreProductoParameter, idProveedorParameter, idCategoríaParameter, cantidadPorUnidadParameter, precioUnidadParameter, unidadesEnExistenciaParameter, unidadesEnPedidoParameter, nivelNuevoPedidoParameter, suspendidoParameter);
        }
    
        public virtual ObjectResult<usp_productosPorNombre_Result> usp_productosPorNombre(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_productosPorNombre_Result>("usp_productosPorNombre", nombreParameter);
        }
    
        public virtual ObjectResult<usp_ProductosSelect_Result> usp_ProductosSelect(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductosSelect_Result>("usp_ProductosSelect", idProductoParameter);
        }
    
        public virtual ObjectResult<usp_ProductosSelectAll_Result> usp_ProductosSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductosSelectAll_Result>("usp_ProductosSelectAll");
        }
    
        public virtual ObjectResult<usp_ProductosSelectAllByIdCategoría_Result> usp_ProductosSelectAllByIdCategoría(Nullable<int> idCategoría)
        {
            var idCategoríaParameter = idCategoría.HasValue ?
                new ObjectParameter("IdCategoría", idCategoría) :
                new ObjectParameter("IdCategoría", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductosSelectAllByIdCategoría_Result>("usp_ProductosSelectAllByIdCategoría", idCategoríaParameter);
        }
    
        public virtual ObjectResult<usp_ProductosSelectAllByIdProveedor_Result> usp_ProductosSelectAllByIdProveedor(Nullable<int> idProveedor)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductosSelectAllByIdProveedor_Result>("usp_ProductosSelectAllByIdProveedor", idProveedorParameter);
        }
    
        public virtual int usp_ProductosUpdate(Nullable<int> idProducto, string nombreProducto, Nullable<int> idProveedor, Nullable<int> idCategoría, string cantidadPorUnidad, Nullable<decimal> precioUnidad, Nullable<short> unidadesEnExistencia, Nullable<short> unidadesEnPedido, Nullable<int> nivelNuevoPedido, Nullable<bool> suspendido)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("IdProducto", idProducto) :
                new ObjectParameter("IdProducto", typeof(int));
    
            var nombreProductoParameter = nombreProducto != null ?
                new ObjectParameter("NombreProducto", nombreProducto) :
                new ObjectParameter("NombreProducto", typeof(string));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var idCategoríaParameter = idCategoría.HasValue ?
                new ObjectParameter("IdCategoría", idCategoría) :
                new ObjectParameter("IdCategoría", typeof(int));
    
            var cantidadPorUnidadParameter = cantidadPorUnidad != null ?
                new ObjectParameter("CantidadPorUnidad", cantidadPorUnidad) :
                new ObjectParameter("CantidadPorUnidad", typeof(string));
    
            var precioUnidadParameter = precioUnidad.HasValue ?
                new ObjectParameter("PrecioUnidad", precioUnidad) :
                new ObjectParameter("PrecioUnidad", typeof(decimal));
    
            var unidadesEnExistenciaParameter = unidadesEnExistencia.HasValue ?
                new ObjectParameter("UnidadesEnExistencia", unidadesEnExistencia) :
                new ObjectParameter("UnidadesEnExistencia", typeof(short));
    
            var unidadesEnPedidoParameter = unidadesEnPedido.HasValue ?
                new ObjectParameter("UnidadesEnPedido", unidadesEnPedido) :
                new ObjectParameter("UnidadesEnPedido", typeof(short));
    
            var nivelNuevoPedidoParameter = nivelNuevoPedido.HasValue ?
                new ObjectParameter("NivelNuevoPedido", nivelNuevoPedido) :
                new ObjectParameter("NivelNuevoPedido", typeof(int));
    
            var suspendidoParameter = suspendido.HasValue ?
                new ObjectParameter("Suspendido", suspendido) :
                new ObjectParameter("Suspendido", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProductosUpdate", idProductoParameter, nombreProductoParameter, idProveedorParameter, idCategoríaParameter, cantidadPorUnidadParameter, precioUnidadParameter, unidadesEnExistenciaParameter, unidadesEnPedidoParameter, nivelNuevoPedidoParameter, suspendidoParameter);
        }
    
        public virtual int usp_ProveedoresDelete(Nullable<int> idProveedor)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProveedoresDelete", idProveedorParameter);
        }
    
        public virtual int usp_ProveedoresInsert(Nullable<int> idProveedor, string nombreCompañía, string dirección, string ciudad, string país, string teléfono, string páginaPrincipal)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var nombreCompañíaParameter = nombreCompañía != null ?
                new ObjectParameter("NombreCompañía", nombreCompañía) :
                new ObjectParameter("NombreCompañía", typeof(string));
    
            var direcciónParameter = dirección != null ?
                new ObjectParameter("Dirección", dirección) :
                new ObjectParameter("Dirección", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var paísParameter = país != null ?
                new ObjectParameter("País", país) :
                new ObjectParameter("País", typeof(string));
    
            var teléfonoParameter = teléfono != null ?
                new ObjectParameter("Teléfono", teléfono) :
                new ObjectParameter("Teléfono", typeof(string));
    
            var páginaPrincipalParameter = páginaPrincipal != null ?
                new ObjectParameter("PáginaPrincipal", páginaPrincipal) :
                new ObjectParameter("PáginaPrincipal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProveedoresInsert", idProveedorParameter, nombreCompañíaParameter, direcciónParameter, ciudadParameter, paísParameter, teléfonoParameter, páginaPrincipalParameter);
        }
    
        public virtual ObjectResult<usp_ProveedoresSelect_Result> usp_ProveedoresSelect(Nullable<int> idProveedor)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProveedoresSelect_Result>("usp_ProveedoresSelect", idProveedorParameter);
        }
    
        public virtual ObjectResult<usp_ProveedoresSelectAll_Result> usp_ProveedoresSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProveedoresSelectAll_Result>("usp_ProveedoresSelectAll");
        }
    
        public virtual int usp_ProveedoresUpdate(Nullable<int> idProveedor, string nombreCompañía, string dirección, string ciudad, string país, string teléfono, string páginaPrincipal)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var nombreCompañíaParameter = nombreCompañía != null ?
                new ObjectParameter("NombreCompañía", nombreCompañía) :
                new ObjectParameter("NombreCompañía", typeof(string));
    
            var direcciónParameter = dirección != null ?
                new ObjectParameter("Dirección", dirección) :
                new ObjectParameter("Dirección", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var paísParameter = país != null ?
                new ObjectParameter("País", país) :
                new ObjectParameter("País", typeof(string));
    
            var teléfonoParameter = teléfono != null ?
                new ObjectParameter("Teléfono", teléfono) :
                new ObjectParameter("Teléfono", typeof(string));
    
            var páginaPrincipalParameter = páginaPrincipal != null ?
                new ObjectParameter("PáginaPrincipal", páginaPrincipal) :
                new ObjectParameter("PáginaPrincipal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ProveedoresUpdate", idProveedorParameter, nombreCompañíaParameter, direcciónParameter, ciudadParameter, paísParameter, teléfonoParameter, páginaPrincipalParameter);
        }
    
        public virtual ObjectResult<usp_resumenVentas_Result> usp_resumenVentas(Nullable<System.DateTime> fechainicio, Nullable<System.DateTime> fechafinal)
        {
            var fechainicioParameter = fechainicio.HasValue ?
                new ObjectParameter("fechainicio", fechainicio) :
                new ObjectParameter("fechainicio", typeof(System.DateTime));
    
            var fechafinalParameter = fechafinal.HasValue ?
                new ObjectParameter("fechafinal", fechafinal) :
                new ObjectParameter("fechafinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_resumenVentas_Result>("usp_resumenVentas", fechainicioParameter, fechafinalParameter);
        }
    
        public virtual ObjectResult<usp_resumenVentasCliente_Result> usp_resumenVentasCliente(Nullable<int> anio, Nullable<int> mes)
        {
            var anioParameter = anio.HasValue ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(int));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_resumenVentasCliente_Result>("usp_resumenVentasCliente", anioParameter, mesParameter);
        }
    
        public virtual ObjectResult<usp_resumenVentasCruzadas_Result> usp_resumenVentasCruzadas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_resumenVentasCruzadas_Result>("usp_resumenVentasCruzadas");
        }
    
        public virtual ObjectResult<usp_resumenVentasEmpleado_Result> usp_resumenVentasEmpleado(Nullable<int> anio, Nullable<int> mes)
        {
            var anioParameter = anio.HasValue ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(int));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_resumenVentasEmpleado_Result>("usp_resumenVentasEmpleado", anioParameter, mesParameter);
        }
    
        public virtual int usp_sysdiagramsDelete(Nullable<int> diagram_id)
        {
            var diagram_idParameter = diagram_id.HasValue ?
                new ObjectParameter("diagram_id", diagram_id) :
                new ObjectParameter("diagram_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_sysdiagramsDelete", diagram_idParameter);
        }
    
        public virtual ObjectResult<usp_sysdiagramsSelect_Result> usp_sysdiagramsSelect(Nullable<int> diagram_id)
        {
            var diagram_idParameter = diagram_id.HasValue ?
                new ObjectParameter("diagram_id", diagram_id) :
                new ObjectParameter("diagram_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_sysdiagramsSelect_Result>("usp_sysdiagramsSelect", diagram_idParameter);
        }
    
        public virtual ObjectResult<usp_sysdiagramsSelectAll_Result> usp_sysdiagramsSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_sysdiagramsSelectAll_Result>("usp_sysdiagramsSelectAll");
        }
    }
}
